# 1 "/root/.topspin-BladeEpu/local_acqu/ppDirs/RARE.ppg"
# 1 "<built-in>"
# 1 "<command-line>"
# 1 "/root/.topspin-BladeEpu/local_acqu/ppDirs/RARE.ppg"
;****************************************************************
;
; Copyright (c) 2002
; Bruker BioSpin MRI GmbH
; D-76275 Ettlingen, Germany
;
; All Rights Reserved
;
; a RARE imaging experiment
;
;****************************************************************
;
;


# 1 "/root/.topspin-BladeEpu/local_acqu/ppDirs/MRI.include" 1
;****************************************************************
;
; Copyright (c) 2018
; Bruker BioSpin MRI GmbH
; D-76275 Ettlingen, Germany
;
; All Rights Reserved
;
;****************************************************************
;MRI.include
# 1 "/root/.topspin-BladeEpu/local_acqu/ppDirs/Avance.incl" 1
;Avance4.incl
;   for AV 4
;
;avance-version (16/08/18)
;
;$CLASS=HighRes Incl
;$COMMENT=


# 19 "/root/.topspin-BladeEpu/local_acqu/ppDirs/Avance.incl"
;setrtp0 denotes TimingController


# 50 "/root/.topspin-BladeEpu/local_acqu/ppDirs/Avance.incl"
# 51 "/root/.topspin-BladeEpu/local_acqu/ppDirs/Avance.incl"


# 63 "/root/.topspin-BladeEpu/local_acqu/ppDirs/Avance.incl"
# 89 "/root/.topspin-BladeEpu/local_acqu/ppDirs/Avance.incl"
# 90 "/root/.topspin-BladeEpu/local_acqu/ppDirs/Avance.incl"


# 123 "/root/.topspin-BladeEpu/local_acqu/ppDirs/Avance.incl"
;#define LOWQ
;#define HIGHQ


;#define MIX_UP
;#define MIX_DOWN
# 136 "/root/.topspin-BladeEpu/local_acqu/ppDirs/Avance.incl"
;$Id: Avance4.incl,v 1.11 2016/11/11 13:43:39 ber Exp $
# 13 "/root/.topspin-BladeEpu/local_acqu/ppDirs/MRI.include" 2
define delay aqq
define delay deparx
define delay derxadc
define delay rdepa


"aqq=dw*td"
"rdepa=de-depa"
"deparx=depa-derx"
"derxadc=derx-deadc"
# 25 "/root/.topspin-BladeEpu/local_acqu/ppDirs/MRI.include"
; contents of De2.incl - usage for different hardware versions to 
; be checked - intermediate solution to support Jobs
define delay rde1

"rde1=de-de1"

# 43 "/root/.topspin-BladeEpu/local_acqu/ppDirs/MRI.include"
; Remark:  is the string concatenation mode for cpp with
; traditional option


# 50 "/root/.topspin-BladeEpu/local_acqu/ppDirs/MRI.include"
; end of contents of De2.incl


# 71 "/root/.topspin-BladeEpu/local_acqu/ppDirs/MRI.include"
	


	
# 82 "/root/.topspin-BladeEpu/local_acqu/ppDirs/MRI.include"
	


# 122 "/root/.topspin-BladeEpu/local_acqu/ppDirs/MRI.include"
	


# 16 "/root/.topspin-BladeEpu/local_acqu/ppDirs/RARE.ppg" 2

# 1 "/root/.topspin-BladeEpu/local_acqu/ppDirs/PrepModulesHead.mod" 1
;****************************************************************
;
; Copyright (c) 2003-2007
; Bruker BioSpin MRI GmbH
; D-76275 Ettlingen, Germany
;
; $Id$
;
; All Rights Reserved
;
; Declaration of pulseprogram parameters and subroutines for 
; preparation  modules
;
; Must be included after MRI.include!
;
;****************************************************************

;**** Fat Suppression ****
# 1 "/root/.topspin-BladeEpu/local_acqu/ppDirs/FatSup.mod" 1
;****************************************************************
;
; Copyright (c) 2018
; Bruker BioSpin MRI GmbH
; D-76275 Ettlingen, Germany
;
; $Id$
;
; All Rights Reserved
;
; FatSup.mod : Declaration of Fat Suppression Subroutine
;
;****************************************************************

if (PVM_FatSupPerform == Yes)
{
  define pulse           fatSupPul   = {$PVM_FatSupRfLength}
  define list<frequency> fatSupList  = {$PVM_FatSupFL}
  
  define delay fatSupRamp  = {$PVM_FatSupRampTime}
  define delay fatSupWait  = {$PVM_FatSupGradWait}
  define delay fatSupSpoil = {$PVM_FatSupSpoilDur}

  ; convert from ms to s
  "fatSupRamp  = fatSupRamp  / 1000"
  "fatSupWait  = fatSupWait  / 1000"
  "fatSupSpoil = fatSupSpoil / 1000"
}
subroutine FatSup
# 21 "/root/.topspin-BladeEpu/local_acqu/ppDirs/PrepModulesHead.mod" 2

;**** Flow Saturation ****

# 1 "/root/.topspin-BladeEpu/local_acqu/ppDirs/FlowSat.mod" 1
;****************************************************************
;
; Copyright (c) 2018
; Bruker BioSpin MRI GmbH
; D-76275 Ettlingen, Germany
;
; $Id$
;
; All Rights Reserved
;
; FlowSat.mod: Declaration of subroutines for Flow Saturation 
; call
; subr FlowSat()
; subr FlowSatInit()
; subr FlowSatInc()
; 
;****************************************************************

if(PVM_InFlowSatOnOff == 1)
{
define list<frequency> modlis4 = {$PVM_InFlowSatFL}
define list<grad_scalar> flowSatGrad={$PVM_InFlowSatGrad}

define delay SfD0 = {$PVM_SfD0}
define delay SfD2 = {$PVM_SfD2}
# 27 "/root/.topspin-BladeEpu/local_acqu/ppDirs/FlowSat.mod"
define pulse SfP0 = {$PVM_SfP0}
define loopcounter SfLp0 = {$PVM_SfLp0}
}


subroutine FlowSat
subroutine FlowSatInc
subroutine FlowSatInit
# 25 "/root/.topspin-BladeEpu/local_acqu/ppDirs/PrepModulesHead.mod" 2

;**** Saturation Transfer ****

# 1 "/root/.topspin-BladeEpu/local_acqu/ppDirs/SatTrans.mod" 1
;****************************************************************
; $Source$
;
; Copyright (c) 2018
; Bruker BioSpin MRI GmbH
; D-76275 Ettlingen, Germany
;
; All Rights Reserved
;
; SatTrans.mod: Declaration of subroutine for Saturation transfer 
; call
; subr SatTrans()
;
; $Id$
;****************************************************************
;**** Saturation Transfer Module ****


; PVM_SatTransFL:        List of offset frequencies to be measured.
; PVM_SattransNPulses:   Number of pulses used in one saturation event
; PVM_SattransPowerList: List of RF amplitudes for saturation pulses.
;                        Two elements long: first element: 0 Watt,
;                        used for one reference scan. Subsequent scans
;                        use amplitude as specified in UI.
; StReference:           If PVM_SatTransRefScan is On then list StRfPower
;                        has two elements (1st is zero for reference scan)
;                        If RefScan is Off then lsit has only one element.
;			 Nevertheless we increment to avoid another 'if'  
# 31 "/root/.topspin-BladeEpu/local_acqu/ppDirs/SatTrans.mod"
if(PVM_SatTransOnOff)
{
  define list<frequency> modlis5    = {$PVM_SatTransFL}
  define list<power> StRfPower      = {$PVM_SatTransPowerList}
             
  define delay StD0                 = {$PVM_StD0}
  define delay StD1                 = {$PVM_StD1}
  define delay StD2                 = {$PVM_StD2}
  define delay StD3                 = {$PVM_StD3}

  define pulse StP0                 = {$PVM_StP0}

  define loopcounter StNPulses      = {$PVM_SatTransNPulses}
  define loopcounter StReference
  "StReference = 1"
}
subroutine SatTransInit
subroutine SatTransInc
subroutine SatTrans
# 29 "/root/.topspin-BladeEpu/local_acqu/ppDirs/PrepModulesHead.mod" 2

;*** FOV Saturation ***

# 1 "/root/.topspin-BladeEpu/local_acqu/ppDirs/FovSat.mod" 1
;****************************************************************
;
; Copyright (c) 2018
; Bruker BioSpin MRI GmbH
; D-76275 Ettlingen, Germany
;
; $Id$
;
; All Rights Reserved
;
; FovSat.mod : Declaration of FOV Saturation subroutine
; call: subr FovSat()
;
;****************************************************************


if (PVM_FovSatOnOff == On)
{
  define pulse           fovSatPul   = {$PVM_FovSatRfLength}
  define list<frequency> fovSatList  = {$PVM_FovSatFL}
  
  define delay fovSatRamp  = {$PVM_FovSatRampTime}
  define delay fovSatWait  = {$PVM_FovSatGradWait}
  define delay fovSatSpoil = {$PVM_FovSatSpoilDur}
# 26 "/root/.topspin-BladeEpu/local_acqu/ppDirs/FovSat.mod"
  ; convert from ms to s
  "fovSatRamp  = fovSatRamp  / 1000"
  "fovSatWait  = fovSatWait  / 1000"
  "fovSatSpoil = fovSatSpoil / 1000"  
}

subroutine FovSat

# 33 "/root/.topspin-BladeEpu/local_acqu/ppDirs/PrepModulesHead.mod" 2

;**** Black Blood ****

# 1 "/root/.topspin-BladeEpu/local_acqu/ppDirs/BlBlood.mod" 1
;****************************************************************
;
; Copyright (c) 2018
; Bruker BioSpin MRI GmbH
; D-76275 Ettlingen, Germany
;
; $Id$
;
; All Rights Reserved
;
; BlBlood.mod : Declaration of Black blood  subroutine
;
; call
; subr BlBlood(ph0) : Black blood preparation with RF phaselist
;                     ph0
;
;****************************************************************

if(PVM_BlBloodOnOff)
{
define list<frequency> modlis8 = {$PVM_BlBloodFL}
define delay BlbD0 = {$PVM_BlbD0}
define delay BlbD1 = {$PVM_BlbD1}
define delay BlbD2 = {$PVM_BlbD2}

define pulse BlbP0 = {$PVM_BlbP0}
}
subroutine BlBlood
# 37 "/root/.topspin-BladeEpu/local_acqu/ppDirs/PrepModulesHead.mod" 2

;**** Trigger ****

# 1 "/root/.topspin-BladeEpu/local_acqu/ppDirs/Trigger.mod" 1
;****************************************************************
;
; Copyright (c) 2018
; Bruker BioSpin MRI GmbH
; D-76275 Ettlingen, Germany
;
; All Rights Reserved
;
; Trigger.mod - Trigger Module
;
;****************************************************************

if (PVM_TriggerModule == On)
{
  define delay trigDur = {$PVM_TriggerDur}
  define delay trigDel = {$PVM_TriggerDelay}

  ; convert from ms to s
  "trigDur = trigDur / 1000"
  "trigDel = trigDel / 1000"
}
subroutine Trigger
subroutine TriggerPhase
subroutine TriggerSlice
# 41 "/root/.topspin-BladeEpu/local_acqu/ppDirs/PrepModulesHead.mod" 2

;**** Trigger Out ****

# 1 "/root/.topspin-BladeEpu/local_acqu/ppDirs/TriggerOut.mod" 1
;****************************************************************
;
; Copyright (c) 2018
; Bruker BioSpin MRI GmbH
; D-76275 Ettlingen, Germany
;
; All Rights Reserved
; $Id$
;****************************************************************

if (PVM_TriggerOutOnOff == On)
{
  define delay trigOutDur = {$PVM_TriggerOutDur}
  define delay trigOutDel = {$PVM_TriggerOutDelay}

  ; convert from ms to s
  "trigOutDur = trigOutDur / 1000"
  "trigOutDel = trigOutDel / 1000"
}
subroutine TriggerOut
subroutine TriggerOutStart
subroutine TriggerOutSlice
subroutine TriggerOutVolume
# 45 "/root/.topspin-BladeEpu/local_acqu/ppDirs/PrepModulesHead.mod" 2

;**** Outer Volume Suppression ****

# 1 "/root/.topspin-BladeEpu/local_acqu/ppDirs/WsOvs.mod" 1
;****************************************************************
;
; Copyright (c) 2018
; Bruker BioSpin MRI GmbH
; D-76275 Ettlingen, Germany
;
; $Id$
;
; All Rights Reserved
;
; WsOvs.mod: Declaration of water suppression and Outer 
;            volume suppression subroutines
;
; call 
; subr Ovs(ph0) ;  execution of OVS with ph0 phaselist
;
; subr WsOvs(ph0,ph1) : execution of OVS with ph0 and WS with ph1
;                       phaselist
;****************************************************************

;**** OuterVolumeSuppression ****

if(PVM_OvsOnOff == 1)
{
define list<frequency> Ovslist={$PVM_OvsFrequencyList}
define delay OvsD0 = {$PVM_OvsD0}
define delay OvsD1 = {$PVM_OvsD1}
define pulse OvsP0 = {$PVM_OvsP0}
}
subroutine Ovs
# 62 "/root/.topspin-BladeEpu/local_acqu/ppDirs/WsOvs.mod"
;*** WaterSuppression Module with OVS ****

if (PVM_WsMode)
{

define list<frequency> Wslist={$PVM_WsOffsetHz}
define pulse WsP0 = {$PVM_WsP0}
define pulse WsP1 = {$PVM_WsP1}
define pulse WsP2 = {$PVM_WsP2}
define delay WsNp0 
"WsNp0 = WsP0"
define delay WsNp1 
"WsNp1 = WsP1"
define delay WsNp2 
"WsNp2 = WsP2"
define list<delay> ChD1={$PVM_ChppgD1}
define list<delay> ChD2={$PVM_ChppgD2}
define list<delay> VpD1={$PVM_VpppgD1}
define list<delay> VpD2={$PVM_VpppgD2}
# 82 "/root/.topspin-BladeEpu/local_acqu/ppDirs/WsOvs.mod"
}


subroutine WsOvsMain
subroutine WsOvs
subroutine Ws
# 49 "/root/.topspin-BladeEpu/local_acqu/ppDirs/PrepModulesHead.mod" 2

;**** Solvent Suppression module ****

# 1 "/root/.topspin-BladeEpu/local_acqu/ppDirs/WsSat.mod" 1
;******************************************************************
;
; Copyright (c) 2018
; Bruker BioSpin MRI GmbH
; D-76275 Ettlingen, Germany
;
; $Id$ 
;
; All Rights Reserved
;
; WsSat.mod - Declaration of water suppression and FOV saturation 
;             subroutines
; call
; subr WsSat(ph0) : execution of WS with ph0 phaselist and 
;                   FOV saturation (as passed as argument)    
;      
;*******************************************************************


; Definitions for WsPpgParams are included in WsOvs.mod
subroutine WsSatMain
subroutine WsSat
# 53 "/root/.topspin-BladeEpu/local_acqu/ppDirs/PrepModulesHead.mod" 2

;**** Selective Inversion Recovery ****

# 1 "/root/.topspin-BladeEpu/local_acqu/ppDirs/SliceSelIr.mod" 1
;****************************************************************
;
; Copyright (c) 2018
; Bruker BioSpin MRI GmbH
; D-76275 Ettlingen, Germany
;
; $Id$
;
; All Rights Reserved
;
; SlicelSelIr.mod : declaration of slice Selective Inversion 
;                   Recovery subroutine
; call SliceSelIr()
; 
;
;****************************************************************


if(PVM_SelIrOnOff)
{
  define list<frequency> IrFL = {$PVM_SelIrFL} 
  define delay IrD0 = {$PVM_SelIrD0} ; PVM_InterInvDelay
  define delay IrD1 = {$PVM_SelIrD1} ; PVM_InterInvEndDelay[0]
  define delay IrD2 = {$PVM_SelIrD2} ; Spoiler duration
  define delay IrD4 = {$PVM_SelIrD4} ; risetime
# 27 "/root/.topspin-BladeEpu/local_acqu/ppDirs/SliceSelIr.mod"
  define pulse IrP0 = {$PVM_SelIrP0}
  define loopcounter IrL0 = {$PVM_SelIrL0}
  define loopcounter IrL1
}

subroutine SliceSelIr

# 57 "/root/.topspin-BladeEpu/local_acqu/ppDirs/PrepModulesHead.mod" 2

;**** Tagging ****

# 1 "/root/.topspin-BladeEpu/local_acqu/ppDirs/Tagging.mod" 1
;****************************************************************
;
; Copyright (c) 2007
; Bruker BioSpin MRI GmbH
; D-76275 Ettlingen, Germany
;
; $Id$
;
; All Rights Reserved
;
; Tagging.mod : Declaration of tagging subroutine
; call
; subr Tagging()
;
;****************************************************************

if(PVM_TaggingOnOff)
{
define list<frequency> taggfreq={$PVM_TaggingFL}

define delay TaggD0 = {$PVM_TaggingD0}
define delay TaggD1 = {$PVM_TaggingD1}
define delay TaggD2 = {$PVM_TaggingD2}
define delay TaggD3 = {$PVM_TaggingD3}
define delay TaggD4 = {$PVM_TaggingD4}
# 27 "/root/.topspin-BladeEpu/local_acqu/ppDirs/Tagging.mod"
define pulse TaggP0 = {$PVM_TaggingP0}
define loopcounter TaggL0 = {$PVM_TaggingLp0}
}

subroutine Tagging

# 61 "/root/.topspin-BladeEpu/local_acqu/ppDirs/PrepModulesHead.mod" 2

;**** Noe ****

# 1 "/root/.topspin-BladeEpu/local_acqu/ppDirs/Noe.mod" 1
;****************************************************************
;
; Copyright (c) 2018
; Bruker BioSpin MRI GmbH
; D-76275 Ettlingen, Germany
;
; $Id$
;
; All Rights Reserved
;
; Noe.mod: Declaration of Nuclear Overhouser Enhancement 
;             subroutine
; call
; subr Noe()
;
;****************************************************************

if(PVM_NoeOnOff == On)
{
define delay NoeD0 = {$PVM_NoeD0}
define delay NoeD1 = {$PVM_NoeD1}
}

subroutine Noe
# 65 "/root/.topspin-BladeEpu/local_acqu/ppDirs/PrepModulesHead.mod" 2

;**** Evolution ****

# 1 "/root/.topspin-BladeEpu/local_acqu/ppDirs/Evolution.mod" 1
;****************************************************************
;
; Copyright (c) 2018
; Bruker BioSpin MRI GmbH
; D-76275 Ettlingen, Germany
;
; All Rights Reserved
;
; Evolution.mod - Evolution Module
;
;****************************************************************

if (PVM_EvolutionOnOff == On)
{
  define delay       evolDel  = {$PVM_EvolutionDelay}
  define list<delay> evolTime = {$PVM_EvolutionTime}
}

subroutine Evolution
# 69 "/root/.topspin-BladeEpu/local_acqu/ppDirs/PrepModulesHead.mod" 2

;**** Drift Compensation ****

# 1 "/root/.topspin-BladeEpu/local_acqu/ppDirs/DriftComp.mod" 1
;==========================================================
;   subroutine for drift compensation
;==========================================================


if (PVM_DriftCompNavOnOff == On)
{
  define list<frequency> tx_drift_fq = {$PVM_DriftCompNavTxFrq}
  define list<frequency> rx_drift_fq = {$PVM_DriftCompNavRxFrq}
  define pulse DCP0 = {$PVM_DriftCompNavP0}     
  define delay DCD1 = {$PVM_DriftCompNavD1}
  define delay DCD2 = {$PVM_DriftCompNavD2}
  define delay DCD3 = {$PVM_DriftCompNavD3}
  define delay DCD4 = {$PVM_DriftCompNavD4}
  define delay DCD5 = {$PVM_DriftCompNavD5}
  define delay DCD6
  "DCD6 = 10u - de"
  define list<phase> dcph = { 0 }
}
subroutine DriftComp
# 73 "/root/.topspin-BladeEpu/local_acqu/ppDirs/PrepModulesHead.mod" 2
# 17 "/root/.topspin-BladeEpu/local_acqu/ppDirs/RARE.ppg" 2

# 1 "/root/.topspin-BladeEpu/local_acqu/ppDirs/Fws.mod" 1
;****************************************************************
;
; Copyright (c) 2002-2015
; Bruker BioSpin MRI GmbH
; D-76275 Ettlingen, Germany
;
; $Id$
;
; All Rights Reserved
;
; Fws.mod : Declaration of Fat Water Separation Subroutines
;
;****************************************************************

# 16 "/root/.topspin-BladeEpu/local_acqu/ppDirs/Fws.mod"
define list<frequency> zeroFreq = {0}
define delay FwsD0={$PVM_FwsD0}
define list<delay> vardel1={$PVM_FwsDList1}
define list<delay> vardel2={$PVM_FwsDList2}


subroutine FwsLoop
subroutine FwsDelTE1
subroutine FwsDelTE2a
subroutine FwsDelTE2b
# 18 "/root/.topspin-BladeEpu/local_acqu/ppDirs/RARE.ppg" 2

define list<frequency> freqTx = {$ACQ_O1_list} ; no auto increment desired
define list<frequency> freqRx = {$ACQ_O1B_list}

define loopcounter lds = {$PVM_DummyScans}
# 24 "/root/.topspin-BladeEpu/local_acqu/ppDirs/RARE.ppg"
define delay denab
"denab = d3 - de"

define delay d5m40u
"d5m40u = d5 - 40u"

1m sync_grad 100                     \n   10u ctrlgrad 0                       \n   1m shim_off                          \n      \n   2u h2pulse       ;SEL_2H plus interleave_incr \n
# 35 "/root/.topspin-BladeEpu/local_acqu/ppDirs/RARE.ppg"
grad_zero_for_gs <ACQ_spatial_phase_1, ACQ_spatial_phase_2>


;pre-setting the ACQ_spatial_phase_1 counter for the dummy scans:
# 40 "/root/.topspin-BladeEpu/local_acqu/ppDirs/RARE.ppg"
decr,   0u      ACQ_spatial_phase_1.dec
        lo to decr times l1        ;PVM_DummyScans * PVM_RareFactor

;----------------------- preparation modules -----------------------
subr FlowSatInit
;EXEC_begin FlowSatInit FlowSatInit()
# 52 "/root/.topspin-BladeEpu/local_acqu/ppDirs/FlowSat.mod"
 
  if(PVM_InFlowSatOnOff == 1)
  {
        0u      modlis4.res
        0u      flowSatGrad.res
  }
 
;EXEC_end   FlowSatInit
# 44 "/root/.topspin-BladeEpu/local_acqu/ppDirs/RARE.ppg"
subr SatTransInit
;EXEC_begin SatTransInit SatTransInit()
# 48 "/root/.topspin-BladeEpu/local_acqu/ppDirs/SatTrans.mod"
 
  if(PVM_SatTransOnOff)
  {
              0u    modlis5.res
              0u    StRfPower.res
  }
 
;EXEC_end   SatTransInit
# 45 "/root/.topspin-BladeEpu/local_acqu/ppDirs/RARE.ppg"

start,  0u           ACQ_spatial_phase_1.store
# 49 "/root/.topspin-BladeEpu/local_acqu/ppDirs/RARE.ppg"
acc,    0u

subr DriftComp
;EXEC_begin DriftComp DriftComp()
# 22 "/root/.topspin-BladeEpu/local_acqu/ppDirs/DriftComp.mod"
 

  if(PVM_DriftCompYesNo == Yes)
  {
        20u     switch_realtime_tables    ;close to nav acq
    

    if(PVM_DriftCompNavOnOff == On)
    {
        10u     switch_DriftCompensation

       	10u  	rx_drift_fq(receive):f1
      	 5u  	tx_drift_fq:f1

      (DCP0     :sp55 dcph):f1
 
       DCD6                                              ;is 10u - de
		(rde1 de1 adc_DriftCompensation   dcph syrec_DriftCompensation ) (1u 1u   dcph:r):f_DriftCompensation ;is de
       DCD1     dwgen_DriftCompensation
       169u                               ;delay for scan shift
        10u     eoscnpzbwrif_DriftCompensation

       DCD2     grad_ramp{PVM_DriftCompNavSpoilAmp,PVM_DriftCompNavSpoilAmp,PVM_DriftCompNavSpoilAmp}
       DCD3                               ; additional delay after eoscnp requires about 45u
       DCD4     switch_job0             ; requires about 65u
       DCD5
       DCD2     grad_off
    }
  }

 
;EXEC_end   DriftComp
# 51 "/root/.topspin-BladeEpu/local_acqu/ppDirs/RARE.ppg"

    if(PVM_BlBloodOnOff == On)
    {
subr TriggerPhase
;EXEC_begin TriggerPhase TriggerPhase()
# 32 "/root/.topspin-BladeEpu/local_acqu/ppDirs/Trigger.mod"
 
  if (PVM_TriggerMode == per_PhaseStep)
  {
;EXEC_begin Trigger Trigger()
# 23 "/root/.topspin-BladeEpu/local_acqu/ppDirs/Trigger.mod"
 
  if (PVM_TriggerModule == On)
  {
    trigDur     trignl1
    trigDel
  }
 
;EXEC_end   Trigger
  }
 
;EXEC_end   TriggerPhase
# 55 "/root/.topspin-BladeEpu/local_acqu/ppDirs/RARE.ppg"
    }
subr BlBlood
;EXEC_begin BlBlood BlBlood(phase ph0)
# 29 "/root/.topspin-BladeEpu/local_acqu/ppDirs/BlBlood.mod"
 
 if(PVM_BlBloodOnOff) 
   {
        10u     modlis8:f1 
        10u
     (BlbP0     :sp46  ph0):f1
      BlbD2     grad_ramp{0, 0, PVM_BlbGrad}
         0u     modlis8.inc
        10u
        10u     modlis8:f1
        10u 
     (BlbP0     :sp46  ph0):f1
      BlbD2     grad_off
      BlbD1     grad_ramp{0, 0, PVM_BlBloodSpoilAmp}
      BlbD0     grad_off
         0u     modlis8.inc
   }
  
;EXEC_end   BlBlood
# 57 "/root/.topspin-BladeEpu/local_acqu/ppDirs/RARE.ppg"
subr TriggerPhase
;EXEC_begin TriggerPhase TriggerPhase()
# 32 "/root/.topspin-BladeEpu/local_acqu/ppDirs/Trigger.mod"
 
  if (PVM_TriggerMode == per_PhaseStep)
  {
;EXEC_begin Trigger Trigger()
# 23 "/root/.topspin-BladeEpu/local_acqu/ppDirs/Trigger.mod"
 
  if (PVM_TriggerModule == On)
  {
    trigDur     trignl1
    trigDel
  }
 
;EXEC_end   Trigger
  }
 
;EXEC_end   TriggerPhase
# 58 "/root/.topspin-BladeEpu/local_acqu/ppDirs/RARE.ppg"
subr SliceSelIr
;EXEC_begin SliceSelIr SliceSelIr()
# 32 "/root/.topspin-BladeEpu/local_acqu/ppDirs/SliceSelIr.mod"
 
  if(PVM_SelIrOnOff == On)
  {
                        "IrL1=IrL0"

             10u        IrFL.res

    irloop18,  10u        IrFL :f1

            IrD4        grad_ramp{0, 0, PVM_SelIrGradAmp*100}
           (IrP0:sp42   ph0):f1
            IrD4        grad_off

        if "IrL1 > 1"
        {
            IrD0
        }
                        "IrL1 = IrL1 - 1"
              0u        IrFL.inc
              0u        grad_matrix.inc

    lo to irloop18 times IrL0

            IrD2        grad_ramp{0, 0, PVM_SelIrSpoilAmp}
            IrD4        grad_off
            IrD1
              0u        IrFL.res
              0u        grad_matrix.res
  }
 
;EXEC_end   SliceSelIr
# 59 "/root/.topspin-BladeEpu/local_acqu/ppDirs/RARE.ppg"
# 61 "/root/.topspin-BladeEpu/local_acqu/ppDirs/RARE.ppg"
slice,               29.8u switch_realtime_tables        \n         0.1u update_interactive_parameters \n         0.1u blockrequest 	
       10u           freqRx(receive):f1
        0u           freqRx.inc

subr TriggerSlice
;EXEC_begin TriggerSlice TriggerSlice()
# 40 "/root/.topspin-BladeEpu/local_acqu/ppDirs/Trigger.mod"
 
  if (PVM_TriggerMode == per_Slice)
  {
;EXEC_begin Trigger Trigger()
# 23 "/root/.topspin-BladeEpu/local_acqu/ppDirs/Trigger.mod"
 
  if (PVM_TriggerModule == On)
  {
    trigDur     trignl1
    trigDel
  }
 
;EXEC_end   Trigger
  }
 
;EXEC_end   TriggerSlice
# 65 "/root/.topspin-BladeEpu/local_acqu/ppDirs/RARE.ppg"
subr FlowSat
;EXEC_begin FlowSat FlowSat()
# 32 "/root/.topspin-BladeEpu/local_acqu/ppDirs/FlowSat.mod"
 
  if(PVM_InFlowSatOnOff == 1)
  {

    flow119,SfD0    modlis4:f1   	grad_ramp{0, 0, flowSatGrad*100}
         (SfP0    :sp44):f1
          SfD2            	grad_ramp{0, 0, PVM_InFlowSatSpoilGrad}
          SfD0	  grad_off
  }
  
;EXEC_end   FlowSat
# 66 "/root/.topspin-BladeEpu/local_acqu/ppDirs/RARE.ppg"
subr Tagging
;EXEC_begin Tagging Tagging()
# 31 "/root/.topspin-BladeEpu/local_acqu/ppDirs/Tagging.mod"
 

  if(PVM_TaggingOnOff)
  {

                5u    taggfreq.res	

    if(PVM_TaggingMode == DANTE)
    {
                5u    taggfreq:f1  
            TaggD4    grad_ramp{PVM_TaggingGradAmp1, PVM_TaggingGradAmp2,0}
           (TaggP0:   sp45):f1

       tag120, TaggD2
            (TaggP0:   sp45):f1
       lo to tag120 times TaggL0

             TaggD4    grad_off

      if(PVM_TaggingDir == Tagging_grid)
      {
             TaggD1    
                 0u    taggfreq.inc
                10u    taggfreq:f1
             TaggD4    grad_ramp{PVM_TaggingGradAmp3,PVM_TaggingGradAmp4,0} 
            (TaggP0:   sp45):f1
	    
       tag221, TaggD2
            (TaggP0:   sp45):f1
       lo to tag221 times TaggL0

             TaggD4    grad_off
      }
    }


    if(PVM_TaggingMode == SPAMM)
    {		       
                 5u    taggfreq:f1
            (TaggP0:   sp45):f1

       tag322, TaggD2    grad_ramp{PVM_TaggingGradAmp1,PVM_TaggingGradAmp2,0}
             TaggD4    grad_off
            (TaggP0:   sp45):f1
       lo to tag322 times TaggL0

      if(PVM_TaggingDir == Tagging_grid)
      {
                 0u    taggfreq.inc
                10u    taggfreq:f1
            (TaggP0:   sp45):f1

       tag423, TaggD2    grad_ramp{PVM_TaggingGradAmp3,PVM_TaggingGradAmp4,0}
             TaggD4    grad_off
            (TaggP0:   sp45):f1
       lo to tag423 times TaggL0
      }
    }

                10u
             TaggD3    grad_ramp{PVM_TaggingSpoilAmp,0,0}
             TaggD4    grad_off
             TaggD0
  }
 
;EXEC_end   Tagging
# 67 "/root/.topspin-BladeEpu/local_acqu/ppDirs/RARE.ppg"
subr FovSat
;EXEC_begin FovSat FovSat()
# 32 "/root/.topspin-BladeEpu/local_acqu/ppDirs/FovSat.mod"
 
  if (PVM_FovSatOnOff == On)
  {
                 5u   PVM_FovSatGrad.res
                 5u   fovSatList.res

    fov24, fovSatRamp   grad_ramp<magnet_coord>{PVM_FovSatGrad[]} fovSatList:f1
         (fovSatPul   :sp41):f1
        fovSatSpoil   grad_ramp{0, 0, PVM_FovSatSpoilAmp}
                 0u   fovSatList.inc
                 0u   PVM_FovSatGrad.inc        
    lo to fov24 times PVM_FovSatNSlices
         
         fovSatRamp   grad_off
         fovSatWait
  }
 
;EXEC_end   FovSat
# 68 "/root/.topspin-BladeEpu/local_acqu/ppDirs/RARE.ppg"
subr SatTrans
;EXEC_begin SatTrans SatTrans()
# 73 "/root/.topspin-BladeEpu/local_acqu/ppDirs/SatTrans.mod"
 
  if(PVM_SatTransOnOff)
  {
             10u    StRfPower:f1
     pulse25, StD1    modlis5:f1
            StP0:   sp43(currentpower):f1

         lo to pulse25 times StNPulses

            StD2    grad_ramp{0, 0, PVM_SatTransSpoil.ampl}
            StD3    groff
  }
 
;EXEC_end   SatTrans
# 69 "/root/.topspin-BladeEpu/local_acqu/ppDirs/RARE.ppg"
subr FatSup
;EXEC_begin FatSup FatSup()
# 30 "/root/.topspin-BladeEpu/local_acqu/ppDirs/FatSup.mod"
 
  if (PVM_FatSupPerform == Yes)
  {
           10u       fatSupList:f1
    (fatSupPul       :sp40):f1
   fatSupSpoil       grad_shape {0, 0, PVM_FatSupSpoilAmp}
    fatSupRamp       grad_off
    fatSupWait
  }
 
;EXEC_end   FatSup
# 70 "/root/.topspin-BladeEpu/local_acqu/ppDirs/RARE.ppg"

;---------------------------- excitation ---------------------------
        d9           grad_ramp{g1, 0, g1}                ;TR spoiler
        d3           grad_ramp{ 0, 0, g0}    freqTx:f1     ;slice on
# 76 "/root/.topspin-BladeEpu/local_acqu/ppDirs/RARE.ppg"
       (p0:sp0       ph0):f1                              ;exc pulse

        d2           grad_ramp{g2, 0, g7}                 ;read deph
        d1           grad_off                             ;TE-fill 1

subr FwsDelTE1
;EXEC_begin FwsDelTE1 FwsDelTE1(any freqTx)
# 33 "/root/.topspin-BladeEpu/local_acqu/ppDirs/Fws.mod"
 
  if (PVM_FwsOnOff==On)
  {
    FwsD0	zeroFreq:f1	;min is 10u
    10u		freqTx:f1
  }	
 
;EXEC_end   FwsDelTE1
# 81 "/root/.topspin-BladeEpu/local_acqu/ppDirs/RARE.ppg"
# 83 "/root/.topspin-BladeEpu/local_acqu/ppDirs/RARE.ppg"
;--------------------------- refocusing ----------------------------
echo1,  0u           ACQ_spatial_phase_1.restore
echo,   d3           grad_ramp{ 0, 0, g0}                  ;slice on

       (p1:sp1       ph1):f1                               ;pi-pulse

        d5           grad_ramp{g8, ACQ_spatial_phase_1*g4, g3-ACQ_spatial_phase_2*g6} ;enc+slice-reph
        d6           grad_off                            ;TE-fill 2a
subr FwsDelTE2a
;EXEC_begin FwsDelTE2a FwsDelTE2a(any freqTx)
# 42 "/root/.topspin-BladeEpu/local_acqu/ppDirs/Fws.mod"
 
  if (PVM_FwsOnOff==On)
  {
    vardel1	zeroFreq:f1     ;min is 10u
    10u		freqTx:f1
  }
 
;EXEC_end   FwsDelTE2a
# 92 "/root/.topspin-BladeEpu/local_acqu/ppDirs/RARE.ppg"
# 94 "/root/.topspin-BladeEpu/local_acqu/ppDirs/RARE.ppg"
     denab           grad_ramp{g5, 0, 0}               ;read-on + acq
                     (rde1 de1 adc_job0   ph0 syrec_job0 ) (1u 1u   ph1:r):f_job0

  aq_job0          dwgen_job0

        d6           grad_off                            ;TE-fill 2b
subr FwsDelTE2b
;EXEC_begin FwsDelTE2b FwsDelTE2b(any freqTx)
# 51 "/root/.topspin-BladeEpu/local_acqu/ppDirs/Fws.mod"
 
  if (PVM_FwsOnOff==On)
  {
    vardel2	zeroFreq:f1     ;min is 10u
    10u		freqTx:f1
  }
 
;EXEC_end   FwsDelTE2b
# 101 "/root/.topspin-BladeEpu/local_acqu/ppDirs/RARE.ppg"
# 103 "/root/.topspin-BladeEpu/local_acqu/ppDirs/RARE.ppg"
    d5m40u           grad_ramp{g8, -ACQ_spatial_phase_1*g4, g3+ACQ_spatial_phase_2*g6} ;enc+slice-reph2
       40u           eoscnpzbwrif_job0

        0u           ACQ_spatial_phase_1.inc

     lo to echo  times PVM_RareFactor
# 110 "/root/.topspin-BladeEpu/local_acqu/ppDirs/RARE.ppg"
     lo to echo1 times PVM_NEchoImages

;----------------------------- flipback ----------------------------
    if( PVM_FlipBackOnOff == On)
    {
        d3           grad_ramp{0, 0, g0}                   ;slice on

       (p1:sp1       ph1):f1                               ;pi-pulse
# 119 "/root/.topspin-BladeEpu/local_acqu/ppDirs/RARE.ppg"
        d1           grad_off
        d2           grad_ramp{g2, 0,  0}              ;read-dephase
        d3           grad_ramp{ 0, 0, g0}                  ;slice on

       (p0:sp0       ph3):f1                               ;flipback
    }

        d3           grad_off
# 128 "/root/.topspin-BladeEpu/local_acqu/ppDirs/RARE.ppg"
;---------------------------- slice loop ---------------------------
        0u           grad_matrix.inc
        d0           freqTx.inc

subr FlowSatInc
;EXEC_begin FlowSatInc FlowSatInc()
# 44 "/root/.topspin-BladeEpu/local_acqu/ppDirs/FlowSat.mod"
 
  if(PVM_InFlowSatOnOff == 1)
  {
          0u    modlis4.inc 
  }
 
;EXEC_end   FlowSatInc
# 132 "/root/.topspin-BladeEpu/local_acqu/ppDirs/RARE.ppg"

     lo to slice times NSLICES
# 136 "/root/.topspin-BladeEpu/local_acqu/ppDirs/RARE.ppg"
       d10

;--------------------------- dummy loop ----------------------------
                    "lds = lds - 1"
    if "lds>=0" goto start

# 143 "/root/.topspin-BladeEpu/local_acqu/ppDirs/RARE.ppg"
;-------------------- fat water separation loop --------------------
subr FwsLoop
;EXEC_begin FwsLoop FwsLoop(any acc)
# 22 "/root/.topspin-BladeEpu/local_acqu/ppDirs/Fws.mod"
 
  if (PVM_FwsOnOff==On)
  {
    0u vardel1.inc
    0u vardel2.inc
    lo to acc times PVM_FwsLoop
  }
 
;EXEC_end   FwsLoop
# 144 "/root/.topspin-BladeEpu/local_acqu/ppDirs/RARE.ppg"

;-------------------------- averaging loop -------------------------
        0u           ipp0
        0u           ipp3

     lo to acc times NA
# 152 "/root/.topspin-BladeEpu/local_acqu/ppDirs/RARE.ppg"
;----------------------------- 2d-loop -----------------------------
        0u           rpp0
        0u           rpp3

     lo to start times l2        ; PVM_EncMatrix[1] / PVM_RareFactor

;----------------------------- 3d-loop -----------------------------
        0u           ACQ_spatial_phase_2.inc
# 161 "/root/.topspin-BladeEpu/local_acqu/ppDirs/RARE.ppg"
     lo to start times l3        ; PVM_EncMatrix[2]

;---------------------- motion averaging loop ----------------------
     lo to start times NAE

;-------------------------- sattrans loop --------------------------
subr SatTransInc
;EXEC_begin SatTransInc SatTransInc()
# 58 "/root/.topspin-BladeEpu/local_acqu/ppDirs/SatTrans.mod"
 
  if(PVM_SatTransOnOff)
  {
              0u    modlis5.inc

    if "StReference == 1"
    {
              0u    StRfPower.inc
                    "StReference = 0" ;switch off after 1st 'inc'
    }
  }
 
;EXEC_end   SatTransInc
# 167 "/root/.topspin-BladeEpu/local_acqu/ppDirs/RARE.ppg"
# 169 "/root/.topspin-BladeEpu/local_acqu/ppDirs/RARE.ppg"
;------------------------- repetition loop -------------------------
subr Evolution
;EXEC_begin Evolution Evolution()
# 19 "/root/.topspin-BladeEpu/local_acqu/ppDirs/Evolution.mod"
 
  if (PVM_EvolutionOnOff == On)
  {
    if (PVM_EvolutionMode == Variable_Delay)
    {
      evolTime
      0u    evolTime.inc
    }
    else
    {
      evolDel
    }
  }
  
;EXEC_end   Evolution
# 170 "/root/.topspin-BladeEpu/local_acqu/ppDirs/RARE.ppg"

     lo to start times NR

if (ACQ_scan_type != Scan_Experiment) \n{ \n    goto start \n}
exit
# 177 "/root/.topspin-BladeEpu/local_acqu/ppDirs/RARE.ppg"
ph0 = 0 2
ph1 = 1
ph3 = 2 0
